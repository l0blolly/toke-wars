generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["improvedQueryRaw"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model DaoAddress {
  daoName String @map("dao_name") @db.VarChar
  address Bytes  @id(map: "dao_addresses_pk") @unique(map: "dao_addresses_address_uindex")
  daos    Dao    @relation("dao_addressesTodaos", fields: [daoName], references: [name], onDelete: Cascade, onUpdate: NoAction, map: "dao_addresses_daos_name_fk")

  @@map("dao_addresses")
}

model Dao {
  name         String       @id(map: "daos_pk") @db.VarChar
  stage        Int
  coin         String       @default("TBD") @db.VarChar
  geckoId      String       @default("something") @map("gecko_id") @db.VarChar
  daoAddresses DaoAddress[] @relation("dao_addressesTodaos")

  @@map("daos")
}

model Reactor {
  symbol       String   @db.VarChar
  coingeckoId  String?  @map("coingecko_id") @db.VarChar
  isStablecoin Boolean? @default(false) @map("is_stablecoin")
  address      Bytes    @id(map: "reactors_pk") @unique(map: "reactors_address_b_uindex")

  @@map("reactors")
}

model Block {
  number    Int      @id(map: "blocks_pk")
  timestamp DateTime @db.Timestamptz(6)

  @@map("blocks")
}

model CycleHash {
  cycle Int    @id(map: "cycle_hashes_pk")
  hash  String @db.VarChar

  @@map("cycle_hashes")
}

model Erc20Transfer {
  blockNumber      Int
  transactionHash  Bytes
  transactionIndex Int
  address          Bytes
  to               Bytes
  from             Bytes
  value            Decimal @db.Decimal
  logIndex         Int
  data             Bytes

  @@id([transactionHash, logIndex], map: "erc20_transfers_pk")
  @@index([address], map: "erc20_transfers_address_index")
  @@index([address], map: "toke_staking_deposit_address_index")
  @@map("erc20_transfers")
}

model TokeStakingDeposit {
  blockNumber      Int
  transactionHash  Bytes
  transactionIndex Int
  address          Bytes
  logIndex         Int
  data             Bytes
  account          Bytes
  scheduleIx       Decimal @db.Decimal
  amount           Decimal @db.Decimal

  @@id([transactionHash, logIndex], map: "toke_staking_deposit_pk")
  @@map("toke_staking_deposits")
}

model TokeStakingWithdrawCompleted {
  blockNumber      Int
  transactionHash  Bytes
  transactionIndex Int
  address          Bytes
  logIndex         Int
  data             Bytes
  account          Bytes
  scheduleIdx      Decimal @db.Decimal
  amount           Decimal @db.Decimal

  @@id([transactionHash, logIndex], map: "toke_staking_withdraw_completed_pk")
  @@map("toke_staking_withdraw_completed")
}

model IpfsReward {
  address    Bytes
  cycle      Int
  data       Json     @db.Json
  amount     Decimal  @db.Decimal
  cycleTotal Decimal  @map("cycle_total") @db.Decimal

  @@id([cycle, address], map: "ipfs_rewards_pk")
  @@map("ipfs_rewards")
}
