generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model DaoAddress {
  address         String           @id(map: "dao_addresses_pk") @db.VarChar
  daoName         String           @map("dao_name") @db.VarChar
  daos            Dao              @relation("dao_addressesTodaos", fields: [daoName], references: [name], onDelete: Cascade, onUpdate: NoAction, map: "dao_addresses_daos_name_fk")
  daoTransactions DaoTransaction[] @relation("dao_addressesTodao_transactions")

  @@unique([daoName, address], map: "dao_addresses_dao_name_address_uindex")
  @@map("dao_addresses")
}

model DaoTransaction {
  id              Int        @id(map: "dao_transactions_pk") @default(autoincrement())
  daoAddress      String     @map("dao_address") @db.VarChar
  value           Decimal    @db.Decimal
  transactionHash String     @map("transaction_hash") @db.VarChar
  type            String     @db.VarChar
  from            String?    @db.VarChar
  to              String?    @db.VarChar
  blockNumber     Int        @map("block_number")
  address         DaoAddress @relation("dao_addressesTodao_transactions", fields: [daoAddress], references: [address], onDelete: NoAction, onUpdate: NoAction, map: "dao_transactions_dao_addresses_address_fk")

  @@unique([type, blockNumber, transactionHash, value], map: "dao_transactions_type_block_number_transaction_hash_value_uinde")
  @@index([daoAddress], map: "dao_transactions_dao_address_index")
  @@map("dao_transactions")
}

model Dao {
  name         String       @id(map: "daos_pk") @db.VarChar
  stage        Int
  coin         String       @default("TBD") @db.VarChar
  geckoId      String       @default("something") @map("gecko_id") @db.VarChar
  daoAddresses DaoAddress[] @relation("dao_addressesTodaos")

  @@map("daos")
}

model ReactorValue {
  transactionHash String  @map("transaction_hash") @db.VarChar
  contractAddress String  @map("contract_address") @db.VarChar
  to              String  @db.VarChar
  from            String  @db.VarChar
  value           Decimal @db.Decimal
  blockNumber     Int     @map("block_number")
  id              Int     @id(map: "reactor_values_pk") @default(autoincrement())
  reactors        Reactor @relation("reactor_valuesToreactors", fields: [contractAddress], references: [address], onDelete: NoAction, onUpdate: NoAction, map: "reactor_values_reactors_address_fk")

  @@index([contractAddress], map: "reactor_values_contract_address_index")
  @@map("reactor_values")
}

model Reactor {
  address       String         @id(map: "reactors_pk") @db.VarChar
  symbol        String         @db.VarChar
  coingeckoId   String?        @map("coingecko_id") @db.VarChar
  isStablecoin  Boolean?       @default(false) @map("is_stablecoin")
  reactorValues ReactorValue[] @relation("reactor_valuesToreactors")

  @@map("reactors")
}

model Block {
  number    Int      @id(map: "blocks_pk")
  timestamp DateTime @db.Timestamptz(6)

  @@map("blocks")
}

model CycleHash {
  cycle Int    @id(map: "cycle_hashes_pk")
  hash  String @db.VarChar

  @@map("cycle_hashes")
}
